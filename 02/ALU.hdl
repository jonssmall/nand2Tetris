// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    Mux16(a=x, b=false, sel=zx, out=zerox);
    Not16(in=zerox, out=notx);
    Mux16(a=zerox, b=notx, sel=nx, out=notorx);

    Mux16(a=y, b=false, sel=zy, out=zeroy);
    Not16(in=zeroy, out=noty);
    Mux16(a=zeroy, b=noty, sel=ny, out=notory);

    Add16(a=notorx, b=notory, out=xplusy);
    And16(a=notorx, b=notory, out=xandy);
    Mux16(a=xandy, b=xplusy, sel=f, out=result);

    Not16(in=result, out=negated);
    Mux16(a=result, b=negated, sel=no, out=out, out[15]=ng, out[0..7]=xout1, out[8..15]=xout2);

    // funnel effect of checking for a single non-zero value among 16
    Or8Way(in=xout1, out=or1);
    Or8Way(in=xout2, out=or2);
    Or(a=or1, b=or2, out=nonzero);
    Not(in=nonzero, out=zr); 
}

/*

function ALU(inX, inY, zx, nx, zy, ny, f, no) {
  const x1 = gates.multiBitMUX(inX.map(i => ({x: i, y: 0})), zx);
  const x2 = nx ? gates.multiBitNOT(x1) : x1;
  // console.log('x2', x2);

  // multiBitMUX expects uniform input [{x: ..., y: ...}, ...], required to map y as x here.
  const y1 = gates.multiBitMUX(inY.map(i => ({x: i, y: 0})), zy);
  const y2 = ny ? gates.multiBitNOT(y1) : y1;
  // console.log('y2', y2);

  const combined = f ? adderN(x2, y2).map(e => e.sum) : gates.multiBitAND(x2.map((e, i) => ({x: e, y: y2[i]})));
  const out = no ? gates.multiBitNOT(combined) : combined;
  return {
    out,
    zr: out.every(e => !e), // true if all elements false
    ng: out[out.length - 1] // last element true if negative
  };
}

*/